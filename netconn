#!/usr/bin/env bash
#
##
###             _
###  _ __   ___| |_ ___ ___  _ __  _ __
### | '_ \ / _ \ __/ __/ _ \| '_ \| '_ \
### | | | |  __/ || (_| (_) | | | | | | |
### |_| |_|\___|\__\___\___/|_| |_|_| |_|
###  _    _
### (_)><(_)
###
### netconn
### (dis)connect to a network
### copyright (c) 2019 - 2023  |  oxo
###
### GNU GPLv3 GENERAL PUBLIC LICENSE
### This program is free software: you can redistribute it and/or modify
### it under the terms of the GNU General Public License as published by
### the Free Software Foundation, either version 3 of the License, or
### (at your option) any later version.
###
### This program is distributed in the hope that it will be useful,
### but WITHOUT ANY WARRANTY; without even the implied warranty of
### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
### GNU General Public License for more details.
###
### You should have received a copy of the GNU General Public License
### along with this program.  If not, see <https://www.gnu.org/licenses/>.
### https://www.gnu.org/licenses/gpl-3.0.txt
###
### @oxo@qoto.org
###
##
#

## dependencies
#	$source_dir

## usage
#	netconn

## example
#	none


# initial definitions

## script
script_name='netconn'
developer='oxo'
license='gplv3'
initial_release='2019'

## hardcoded variables
source_dir="$XDG_DATA_HOME/c/git/code/source/function"
netkill="$XDG_DATA_HOME/c/git/code/netconn/netkill"
netistat="$XDG_DATA_HOME/c/git/code/tool/netistat"
temp_dir="$XDG_CACHE_HOME/temp"

hostname='myip.opendns.com'
server1='resolver1.opendns.com'
server2='resolver2.opendns.com'


#--------------------------------


# sourcing
source $source_dir/text_appearance
source $source_dir/reply_functions
source $source_dir/splash_screen
source $source_dir/get_sudo


# read_flags

while getopts ":k:s:wqh" opt; do

	case $opt in

		k)
			## -k netkill
			networks=${OPTARG}
                	sh $netkill
			exit 0
			;;

		s)
			## -s show splash screen
			show=1
			;;

		w)
			## -w wireless network flag
			wl_conf=${OPTARG}
			;;

		q)
			## -q quiet
			quiet=1
			;;

		h)
			## -h display help text
			printf "netconn: usage: netconn [-w <config.wifi>]\n"
			exit 0
			;;

		\?)
			printf "netconn: ${MAGENTA}invalid option: -${OPTARG}${NOC}"
			exit 1
			;;

		:)
			## display help
			printf "netconn: ${MAGENTA}option -${OPTARG} requires an argument${NOC}"
			exit 1
			;;

	esac

done


# specific function definitions


become_quiet()
{
	stty_0=$(stty -g)
	tput civis
	stty raw -echo
}


unquiet()
{
	stty $stty_0
	tput cnorm
	printf "[TEST]unquiet did run\n"
}


get_cursor_pos()
{
    # get cursor position
    IFS='[;' read -p $'\e[6n' -d R -rs _ y x _
    printf '%s\n' "$x $y"
}


create_temp_dir()
{
	[[ -d $temp_dir ]] || mkdir -pv $temp_dir
	t0=$(date +%Y%m%d_%H%M%S)
	ip a > $temp_dir/"$t0"_netconn.tmp
}


netistat_1()
{
    net_1=$(sh $netistat)
}

netistat_0()
{
    net_0=$(sh $netistat)
}

netistat_d()
{
	diff <(echo "$net_0") <(echo "$net_1")
	# diffs exits with code 1
	printf '' >/dev/null 2>&1
}


run_netkill()
{
    export from_netconn=1

    if [ -n "$(ip -br a | grep -i up)" ]; then

    	printf "disconnect current network connection? (y/N) "

    	reply_read_single_hidden_timer

	    if printf "$reply" | grep -iq "^y" ; then

		clear
		printf "running netkill...\n"
		sh $netkill
		echo

	    else

		echo
		printf "setting up connection...\n"
		echo

	    fi

	fi

    unset from_netconn
    sleep 1
}


select_interface()
{
    # show default interface
    if [ -n "$wl_conf" ]; then

		## we do have a wl_conf flag

		## show wireless interface (wl*)
	#	## put show_default_interface in separate function
		show_default_interface=$(ip a | \
			grep '^[0-9]' |\
			awk -F ': <' '{print $1}' |\
			grep '^[0-9]\+:\swl')

    else

		## no wl_conf flag entry

		### show usb interface (enp*)
	#	## put show_default_interface in separate function
		show_default_interface=$(ip a | \
			grep '^[0-9]' | \
			awk -F ': <' '{print $1}' | \
			grep '^[0-9]\+:\senp')

		### show ethernet interface (eno*)
	#	## put show_default_interface in separate function
		if [ -n "$show_default_interface" ]; then

			show_default_interface=$(ip a | \
				grep '^[0-9]' | \
				awk -F ': <' '{print $1}' | \
				grep '^[0-9]\+:\senp')

		fi

    fi

    # select interface
    ip a
    echo

	if [ -z "$show_default_interface" ]; then

		printf "${MAGENTA}no default interface${NOC}, press ${YELLOW}o${NOC} to override\n"

		reply_read_single_hidden_timer

		if [ "$reply" == "o" ]; then

			echo

		else

			unquiet
			exit 10

		fi

	fi


    printf "enter preferred interface number [$show_default_interface]: "
    reply_read_single_hidden_timer

    ## if no entry then when wl_conf<>0; then
	##	search wireless devices in ip a and select one that is up
    ## -n -> var lenght greater than 0
    ## -z -> var lenght equals 0
    if [ -n "$reply" ]; then

		## we have an entry for interface
		interface_number=$reply

	else

		## no entry for interface

		if [ -n "$wl_conf"  ]; then

			## we do have a wl_conf flag
		    ## try to autoconnect via wireless interface
		    auto_retrieved_interface=$(ip a | grep '^[0-9]' | awk -F ': ' '{print $2}' | grep ^wl)

		elif [ -z "$wl_conf"  ]; then

			## we do not have a wl_conf flag
			## try to autoconnect via ethernet (enp) interface
		    auto_retrieved_interface=$(ip a | grep '^[0-9]' | awk -F ': ' '{print $2}' | grep ^enp)

		elif [ -z "$auto_retrieved_interface"  ]; then

			## we do not have a wl_conf flag
			## still no auto_retrieved_interface acquired
			## try to autoconnect via ethernet (eno) interface
		    auto_retrieved_interface=$(ip a | grep '^[0-9]' | awk -F ': ' '{print $2}' | grep ^eno)

		else

			printf "${MAGENTA}no valid interface received, please try again${NOC}\n"
		    sleep 0.5
		    select_interface

		fi

	fi

    echo

    ## derive interface from interface_number
    interface=$(ip a | grep "^$interface_number" | awk '{print $2}' | sed 's/://')

	if [ -n "$auto_retrieved_interface" ]; then

		interface=$auto_retrieved_interface

	fi

    ## if interface is wireless, check for entered wireless network flag
    if [[ ${interface:0:1} == 'wl' ]] && [ -z $wl_conf ]; then

		echo
		printf "${MAGENTA}no wireless configuration allocated for $interface${NOC}\n"
		printf "${MAGENTA}point to a valid configuration with the 'w' flag'${NOC}\n"
		printf "exiting...\n"
		exit

	fi

    ## confirmation
    echo
    ip a | grep $interface
    echo
    printf "connect via interface $interface? (Y/n) "
    reply_read_single_hidden_timer

    if printf "$reply" | grep -iq "^n" ; then

		select_interface

	else

		echo
        echo
        printf "interface ${BLUE}$interface${NOC} selected\n"
		sleep 0.5
		echo

	fi
}


set_interface_up()
{
	sleep 0.5

	sudo ip link set $interface up

	if [ $? -eq 0  ]; then

		printf "interface $interface ${BLUE}up${NOC}\n"
		echo

	else

		printf "interface $interface ip link ${MAGENTA}error${NOC}\n"
		printf "exiting\n"

	fi
}


check_wireless_interface()
{
	wireless=0

	if [[ $interface == wl* ]]; then

		wireless=1

	fi
}


wireless_network_select()
{
	if [ $wireless == 1 ]; then

		# select wireless network from list
		wpa_supp

	fi
}


wpa_supp()
{
	sudo systemctl start wpa_supplicant.service
	systemctl status wpa_supplicant.service
	sudo wpa_supplicant -B -i $interface -c $wl_conf
	echo
}


dhcp_connect()
{
	sudo systemctl start dhcpcd.service
	systemctl status dhcpcd.service
	sudo dhcpcd $interface
	#sudo dhcpcd -w $interface
	#sudo dhcpcd --waitip $interface

	echo
	printf "getting host information from dhcp server\n"
	printf "configuring network interface $interface\n"
	#printf "writing DNS configuration to resolvconf\n"
	#resolvconf -i
	sleep 3

	echo
	printf "checking if interface $interface reports a working carrier\n"
	printf "trying to obtain a lease, then forking to background\n"
	sleep 3

	if [ $? -eq 0 ]; then

		echo
		printf "interface $interface ${BLUE}connected${NOC}\n"
		printf "dhcpcd daemonizing...\n"

	else

		echo
		printf "${MAGENTA}$interface not able to obtain lease${NOC}\n"
		printf "exiting\n"
		exit

	fi

	echo
}


enable_dns()
{
	# systemd dns resolving service
	sudo systemctl start systemd-resolved.service
}


wl_info()
{
	if [ $wireless == 1 ]; then

		echo
		iwconfig $interface

	fi
}


ext_ip_info()
{
	#exip=$(protonvpn s | grep IP: | awk '{print $2}')
	#exip=$(curl -4 https://ifconfig.io)
	#exip=$(dig myip.opendns.com @resolver1.opendns.com +dnssec +short)

	printf "obtaining external ip address...\n"

	try=0
	while [[ -z $exip ]]; do

		sleep 1
		let try++
		exip=$(host "$hostname" "$server1" 2>&1 | \
			tail -n 1 | rev | cut -d ' ' -f 1 | rev)
		#exip=$(dig myip.opendns.com @resolver1.opendns.com +dnssec +short)
		#exip=$(protonvpn s | grep IP: | awk '{print $2}')

		sleep 1
		if [[ -z $exip ]]; then
			exip=$(host "$hostname" "$server2" 2>&1 | \
				tail -n 1 | rev | cut -d ' ' -f 1 | rev)
		fi

		#[DEV]
		printf "try: $try\n"
		printf "exip: $exip\n"

		[ $try -ge 10 ] && return

	done

	#printf "external ip: ${YELLOW}$exip${NOC}\n"
	#protonvpn s
}


show_ipa_diff()
{
	t1=`date +%Y%m%d_%H%M%S`
	ip a > $temp_dir/'$t1'_netconn.tmp

	diff $temp_dir/'$t0'_netconn.tmp $temp_dir/'$t1'_netconn.tmp

	# diffs exits with code 1
	printf '' >/dev/null 2>&1
}


unblock_radios()
{
	if [[ ${interface:0:2} == 'wl' ]]; then

		sudo rfkill unblock wlan
		rfkill
		echo

	fi
}


connect_protonvpn()
{
	echo
    printf "connecting vpn, press n to abort "
    reply_read_single_hidden_timer
	echo

    if printf "$reply" | grep -iq "^n" ; then

		return

	else

		sleep 3
		sudo protonvpn c --cc SE -p udp
		sleep 3
		protonvpn s

	fi
}


connect()
{
	create_temp_dir
	[[ -n $show ]] && splash_screen
	get_sudo
	netistat_0
	run_netkill
	select_interface
	unblock_radios
	set_interface_up
	check_wireless_interface
	wireless_network_select
	dhcp_connect
	#enable_dns
	wl_info
	ext_ip_info
	show_ipa_diff
	#connect_protonvpn
	sleep 2
	netistat_1
	netistat_d
}


case $quiet in

	1)
		get_sudo
		#become_quiet
		{
			connect
		} 1>/dev/null 2>&1
		#exec >/dev/null
		#exec 2>&1
		#connect
		#unquiet
		exit
		;;

	*)
		connect
		;;

esac
