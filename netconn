#!/bin/bash
#
##
###             _
###  _ __   ___| |_ ___ ___  _ __  _ __
### | '_ \ / _ \ __/ __/ _ \| '_ \| '_ \
### | | | |  __/ || (_| (_) | | | | | | |
### |_| |_|\___|\__\___\___/|_| |_|_| |_|
###
###  _ _|_ _ ._    _  _
### (_\/|_(_)|_)\/(_|(/_
###   /      |  /  _|
###
### netconn
### (dis)connect to a network..., the right way
###
### usage: netconn [-w <config.wifi>]
###
### (c) 2019 - 2020 cytopyge
###
##
#


# script specific constants

script_name="netconn"
developer="cytopyge"
initial_release_year=2019
source_dir="$HOME/_git/code/sources/functions"


# general function definitions

## define colors
source $source_dir/text_appearance

## reply functions
source $source_dir/reply_functions

## initial_screen
source $source_dir/splash_screen

## user authentication
source $source_dir/get_sudo


# read_flags

while getopts ":k:w:sh" opt; do
	case $opt in
		k)
			## -k netkill
			networks=${OPTARG}
                	sh $HOME/_git/code/netconn/netkill
			exit 0
			;;
		w)
			## -w wireless network flag
			wl_conf=${OPTARG}
			;;
		s)
			## -s show splash screen
			show=1
			;;
		h)
			## -h display help text
			printf "netconn: usage: netconn [-w <config.wifi>]\n"
			exit 0
			;;
		\?)
			printf "netconn: ${RED}invalid option: -${OPTARG}${NOC}"
			exit 1
			;;
		:)
			## display help
			printf "netconn: ${RED}option -${OPTARG} requires an argument${NOC}"
			exit 1
			;;
	esac
done


# specific function definitions


get_cursor_pos() {

    #[TODO] countdown timer
    # Usage: get_cursor_pos
    IFS='[;' read -p $'\e[6n' -d R -rs _ y x _
    printf '%s\n' "$x $y"

}

t0=`date +%Y%m%d_%H%M%S`
ip a > $HOME/_temp/'$t0'_netconn.tmp


run_netkill() {

    export from_netconn=1

    if [ -n "$(ip -br a | grep -i up)" ]; then
    	printf "disconnect current network connection? (y/N) "
    	#reply_single_hidden
    	reply_single_hidden_timed
    	if printf "$reply" | grep -iq "^y" ; then
    	    clear
    	    printf "running netkill...\n"
    	    sh $HOME/_git/code/netconn/netkill
    	    echo
    	else
    	    echo
    	    printf "setting up connection...\n"
    	    echo
    	fi
    fi

    unset from_netconn
    sleep 1

}


select_interface() {

    # show default interface
    if [ -n "$wl_conf"  ]; then
	## we do have a wl_conf flag
	## show wireless interface
	show_default_interface=$(ip a | grep '^[0-9]' | awk -F ': <' '{print $1}' | grep '^[0-9]\+:\swl')
    else
	## no wl_conf flag entry
	## show ethernet interface or empty string
	show_default_interface=$(ip a | grep '^[0-9]' | awk -F ': <' '{print $1}' | grep '^[0-9]\+:\se')
    fi

    # select interface
    ip a
    echo
    printf "enter preferred interface number [$show_default_interface]: "
    #reply_single_hidden
    reply_single_hidden_timed

    ##"if no entry then when wl_conf<>0 then search wireless devices in ip a and select one that is up"
    ## -n -> var lenght greater than 0
    ## -z -> var lenght equals 0
    if [ -n "$reply" ]; then
	## we have an entry for interface
	interface_number=$reply
    else
	## no entry for interface
	if [ -n "$wl_conf"  ]; then
	    ## we do have a wl_conf flag
	    ## try to autoconnect via wireless interface
	    auto_retrieved_interface=$(ip a | grep '^[0-9]' | awk -F ': ' '{print $2}' | grep ^wl)
	elif [ -z "$wl_conf"  ]; then
	    ## we do have a wl_conf flag
	    ## try to autoconnect via ethernet interface
	    auto_retrieved_interface=$(ip a | grep '^[0-9]' | awk -F ': ' '{print $2}' | grep ^e)
	else
	    printf "${RED}no valid interface received, please try again${NOC}\n"
	    sleep 0.5
	    select_interface
	fi
    fi

    echo

    ## derive interface from interface_number
    interface=$(ip a | grep "^$interface_number" | awk '{print $2}' | sed 's/://')
    if [ -n "$auto_retrieved_interface" ]; then
	interface=$auto_retrieved_interface
    fi

    ## if interface is wireless, check for entered wireless network flag
    if [ ${interface:0:1} == 'wl' ] && [ -z $wl_conf ]; then
	echo
	printf "${RED}no wireless configuration allocated for '$interface'${NOC}\n"
	printf "${RED}point to a valid configuration with the 'w' flag'${NOC}\n"
	printf "exiting...\n"
	exit
    fi

    ## confirmation
    echo
    ip a | grep $interface
    echo
    printf "connect via interface '$interface'? (Y/n) "
    reply_single_hidden_timed

    if printf "$reply" | grep -iq "^n" ; then
        select_interface
    else
        echo
        echo
        printf "interface '$interface' selected\n"
	sleep 0.5
	echo
    fi

}


set_interface_up() {

	sleep 0.5

	printf "bringing interface '$interface' up ... "

	sudo ip link set $interface up

	if [ $? -eq 0  ]; then
		printf "${GREEN}success${NOC}\n"
		echo
	else
		echo
		printf "${RED}error, unable to bring $interface up${NOC}\n"
		printf "exiting\n"
	fi

}


check_wireless_interface() {

	wireless=0
	if [[ $interface == wl* ]]; then
		wireless=1
	fi

}


wireless_network_select() {

	if [ $wireless == 1 ]; then
		# select wireless network from list
		wpa_supp
	fi

}


wpa_supp() {

	sudo wpa_supplicant -B -i $interface -c $wl_conf
	echo

}


dhcp_connect() {

	sudo dhcpcd -w $interface

	echo
	printf "getting host information from dhcp server\n"
	printf "configuring network interface $interface\n"
	printf "writing DNS configuration to resolvconf\n"
	resolvconf -i
	echo
	printf "checking if interface $interface reports a working carrier\n"
	printf "trying to obtain a lease, then forking to background\n"
	if [ $? -eq 0 ]; then
		printf "interface ${GREEN}'$interface' connected${NOC}\n"
		printf "dhcpcd daemonizing...\n"
	else
		printf "${RED}$interface not able to obtain lease${NOC}\n"
		printf "exiting\n"
		exit
	fi
	#sleep 1
	echo
	ping -c 1 9.9.9.9
	echo
	ip a

}


enable_dns() {

	sudo systemctl start systemd-resolved.service

}


wl_info() {

	if [ $wireless == 1 ]; then
		echo
		iwconfig $interface
	fi

	printf "external ip: ${GREEN}$(dig myip.opendns.com @resolver1.opendns.com +dnssec +short)${NOC}\n"

}


show_ipa_diff() {

	t1=`date +%Y%m%d_%H%M%S`
	ip a > $HOME/_temp/'$t1'_netconn.tmp

	diff $HOME/_temp/'$t0'_netconn.tmp $HOME/_temp/'$t1'_netconn.tmp

}


unblock_radios() {

	sudo rfkill unblock wlan
	#rfkill unblock bluetooth
	rfkill
	echo

}


#read_flags #doesn't work in function block
[[ -n $show ]] && splash_screen
get_sudo
run_netkill
unblock_radios
select_interface
set_interface_up
check_wireless_interface
wireless_network_select
dhcp_connect
enable_dns
wl_info
show_ipa_diff
