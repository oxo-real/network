#! /usr/bin/env sh

###             _
###  _ __   ___| |_ ___ ___  _ __  _ __
### | '_ \ / _ \ __/ __/ _ \| '_ \| '_ \
### | | | |  __/ || (_| (_) | | | | | | |
### |_| |_|\___|\__\___\___/|_| |_|_| |_|
###
###  # # # # # #
###       #
###  # # # # # #
###

: '
netconn
(dis)connect to a network
copyright (c) 2019 - 2024  |  oxo

GNU GPLv3 GENERAL PUBLIC LICENSE
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
https://www.gnu.org/licenses/gpl-3.0.txt

@oxo@qoto.org


## dependencies
#	$source_dir

## usage
#	netconn

## example
#	none

# '


#set -o errexit
#set -o nounset
set -o pipefail


# initial definitions

## script
script_name='netconn'
developer='oxo'
license='gplv3'
initial_release='2019'

## hardcoded variables
source_dir="$XDG_DATA_HOME/c/git/code/source/function"
network_dir="$XDG_DATA_HOME/c/git/code/network"
temp_dir="$XDG_CACHE_HOME/temp"

hostname='myip.opendns.com'
server1='resolver1.opendns.com'
server2='resolver2.opendns.com'

xckw="$XDG_DATA_HOME/c/keys/wl"


#--------------------------------


# sourcing
source $source_dir/text_appearance
source $source_dir/reply_functions
source $source_dir/splash_screen
source $source_dir/get_sudo

netkill="$network_dir/netkill"
netistat="$network_dir/netistat"


# read_flags

optstring=":k:swqh"
#optstring=":k:sw:qh"
while getopts "$optstring" opt; do

    case $opt in

	k)
	    ## -k netkill
	    networks=${OPTARG}
            sh $netkill
	    exit 0
	    ;;

	s)
	    ## -s show splash screen
	    show=1
	    ;;

	w)
	    ## -w wireless network flag
	    wl_conf=${OPTARG}
	    wireless=1
	    shift
	    wl_conf=$1
	    ;;

	q)
	    ## -q quiet
	    quiet=1
	    ;;

	h)
	    ## -h display help text
	    printf "netconn: usage: netconn [-w <config.wifi>]\n"
	    exit 0
	    ;;

	\?)
	    ## non existing opts will be send here
	    printf "netconn: ${fg_amber}invalid option: -${OPTARG}${st_def}"
	    exit 1
	    ;;

	:)
	    ## display help
	    printf "netconn: ${fg_amber}option -${OPTARG} requires an argument${st_def}"
	    exit 1
	    ;;

    esac

done


# specific function definitions


become_quiet()
{
    stty_0=$(stty -g)
    tput civis
    stty raw -echo
}


unquiet()
{
    stty $stty_0
    tput cnorm
}


get_cursor_pos()
{
    # get cursor position
    IFS='[;' read -p $'\e[6n' -d R -rs _ y x _
    printf '%s\n' "$x $y"
}


create_temp_dir()
{
    [[ -d $temp_dir ]] || mkdir -pv $temp_dir
    t0=$(date +%Y%m%d_%H%M%S)
    ip a > $temp_dir/"$t0"_netconn.tmp
}


cleanup_temp()
{
    rm -rf $temp_dir/*_netconn.tmp
}


netistat_1()
{
    net_1=$(sh $netistat)
}

netistat_0()
{
    net_0=$(sh $netistat)
}

netistat_d()
{
    diff <(echo "$net_0") <(echo "$net_1")
    # diffs exits with code 1
    printf '' >/dev/null 2>&1
}


run_netkill()
{
    export from_netconn=1

    if [ -n "$(ip -br a | grep -i up)" ]; then

    	printf "disconnect current network connection? (y/N) "

    	reply_read_single_hidden_timer

	if printf "$reply" | grep -iq "^y" ; then

	    clear
	    printf "running netkill...\n"
	    sh $netkill
	    echo

	else

	    echo
	    printf "setting up connection...\n"
	    echo

	fi

    fi

    unset from_netconn
    sleep 1
}


get_default_interface()
{
    ## show_default_interface (number and name)
    ## example: '7: enp0s2f0u9u2'
    i_avail="$(ip a | \
		  grep '^[0-9]' | \
		  awk -F ': <' '{print $1}')"

    if [[ $wireless -eq 1 ]]; then

	## we do have a wireless (-w) flag

	## show wireless interface (wl*)
	show_default_interface="$(printf "$i_avail" | \
	grep '^[0-9]\+:\swl')"

    else

	## no wireless (-w) flag entry

	if [[ -z "$show_default_interface" ]]; then

	    ### show usb interface (enp*)
	    show_default_interface="$(printf "$i_avail" | \
	    grep '^[0-9]\+:\senp')"

	fi

	if [[ -z "$show_default_interface" ]]; then

	    ### show ethernet interface (eno*)
	    show_default_interface="$(printf "$i_avail" | \
	    grep '^[0-9]\+:\seno')"

	fi

	if [[ -z "$show_default_interface" ]]; then

	    ## show wireless interface (wl*) (again, this is correct)
	    show_default_interface="$(printf "$i_avail" | \
	    grep '^[0-9]\+:\swl')"

	fi

    fi
}


select_interface()
{
    get_default_interface

    # select interface
    ip a
    echo

    if [ -z "$show_default_interface" ]; then

	printf "${fg_amber}no default interface${st_def}, ${fg_black}${bg_yellow}O${st_def}verride "
	reply_read_single_hidden_timer

	if [[ "$reply" == "o" || "$reply" == $'\x0a' ]]; then

	    echo

	elif [ "$reply" ~= "[:digit:]" ]; then

	    interface_number=$reply

	else

	    echo
	    unquiet
	    exit 10

	fi

    fi

    printf "enter preferred interface number [$show_default_interface]: "
    reply_read_single_hidden_timer

    ## if no entry then when wireless<>0; then
    ##  search wireless devices in ip a and select one that is up
    ## -n -> var length greater than 0
    ## -z -> var length equals 0
    if [[ "$reply" == $'\x0a' ]]; then

	## enter as reply
	interface_number=$(printf $show_default_interface | awk -F ':' '{print $1}')

    elif [[ -n "$reply" ]]; then

	## we have an explicit reply for interface
	interface_number=$reply

    elif [[ -z "$reply" ]]; then

	## no explicit reply for interface
	if [[ "$wireless" -eq 1 ]]; then

	    ## we do have a wireless flag
	    ## try to autoconnect via wireless interface
	    auto_retrieved_interface=$(ip a | grep '^[0-9]' | awk -F ': ' '{print $2}' | grep ^wl)

	elif [[ "$wireless" -ne 1 ]]; then

	    ## we do not have a wireless flag
	    ## try to autoconnect via ethernet (enp) interface
	    auto_retrieved_interface=$(ip a | grep '^[0-9]' | awk -F ': ' '{print $2}' | grep ^enp)

	#elif [ -z "$auto_retrieved_interface" ]; then

	#    ## we do not have a wireless flag
	#    ## still no auto_retrieved_interface acquired
	#    ## try to autoconnect via ethernet (eno) interface
	#    auto_retrieved_interface=$(ip a | grep '^[0-9]' | awk -F ': ' '{print $2}' | grep ^eno)

	#else

	#    printf "no valid ${fg_amber}interface${st_def} received, please try again\n"
	#    sleep 0.5
	#    select_interface

	fi

    fi

    echo

    ## derive interface from interface_number
    interface=$(ip a | grep "^$interface_number" | awk '{print $2}' | sed 's/://')

    if [ -n "$auto_retrieved_interface" ]; then

	interface=$auto_retrieved_interface

    fi

    ## confirmation
    echo
    ip a | grep $interface
    echo
    printf "connect via interface ${fg_blue}$interface?${st_def} (Y/n) "
    reply_read_single_hidden_timer

    if printf "$reply" | grep -iq "^n" ; then

	select_interface

    else

	echo
        echo
        printf "interface $interface ${fg_blue}selected${st_def}\n"
	sleep 0.5
	echo

    fi

    ## wireless subloop
    check_wireless_interface

    if [[ $wireless -eq 1 ]]; then

	## establish wireless connection
	wl_connect

    fi
}


wl_connect()
{
    unblock_radio
    set_interface_up
    ## give interface some time to get up
    sleep 2

    ## wireless connection without explicit ssid
    if [ -z $wl_conf ]; then

	ssid_select
	wl_conf_file_check

    fi

    supplicant_connect
    wl_info
}


check_wireless_interface()
{
    #wireless=0

    if [[ $interface == wl* ]]; then

	wireless=1

    fi
}


ssid_select()
{
    ## give iw dev some time to get up
    ## therefore no direct pipe
    iw_dev_list=$(sudo iw dev $interface scan)
    ## select from available SSID's
    ssid_list=$(printf '%s\n' "$iw_dev_list" | grep SSID | sort | uniq | awk '{print $2}')
    ssid_fzf=$(printf '%s\n%s\n' 'enter hidden ssid' "$ssid_list" | fzf --prompt 'select an available ssid: ')
    ssid=$(printf '%s' "$ssid_fzf" | cut -f 2)
}


wl_conf_file_check()
{
    ## check for existing configuration file
    ## directory is xckw
    ## files generated by wpa_passphrase
    wl_conf="${xckw}/${ssid}.wifi"

    if [[ -n "$ssid" ]]; then

	if [[ ! -f $wl_conf ]]; then

	    ## no configuration file available for selected ssid
	    printf '%s ' "$ssid"
	    wpa_passphrase "$ssid" > "$wl_conf"

	    ## open network (connect w/o password)
	    ## if password left blank, wpa_passphrase makes no wl_conf
	    if [[ ! -f $wl_conf || ! -s $wl_conf ]]; then

		## open network
		printf "network={\n\tssid="$ssid"\n\tkey_mgmt=NONE\n}" > "$wl_conf"

	    fi

	fi

    else

	printf '%s\n' 'no ssid'
	exit 47

    fi
}


supplicant_connect()
{
    sudo systemctl start wpa_supplicant.service
    systemctl status wpa_supplicant.service
    #sudo wpa_supplicant -B -i "$interface" -c "$wl_conf"
    #DEV debug wpa_supplicant:
    sudo wpa_supplicant -d -B -i "$interface" -c "$wl_conf"
    echo
}


set_interface_up()
{
    sleep 0.5

    sudo ip link set $interface up

    if [ $? -eq 0  ]; then

	printf "interface $interface ${fg_blue}running${st_def}\n"
	echo

    else

	printf "interface ${fg_magenta}$interface${st_def} ip link error\n"
	printf "exiting\n"

    fi
}


dhcp_connect()
{
    # DEV service does not exist (install dhcpcd?)
    sudo systemctl start dhcpcd.service
    systemctl status dhcpcd.service
    sudo dhcpcd --waitip $interface

    echo
    printf "getting host information from dhcp server\n"
    printf "configuring network interface $interface\n"
    #printf "writing DNS configuration to resolvconf\n"
    #resolvconf -i
    sleep 1.5

    echo
    printf "checking if interface $interface reports a working carrier\n"
    sleep 0.5

    case $wireless in

	1)
	    printf "acquired access point: ${fg_blue}$ssid${st_def}\n"
	    ;;

    esac

    printf "trying to obtain a lease, then forking to background\n"
    sleep 3

    if [ $? -eq 0 ]; then

	echo
	printf "interface $interface ${fg_blue}connected${st_def}\n"
	printf "dhcpcd daemonizing...\n"

    else

	echo
	printf "${fg_magenta}$interface${st_def} not able to obtain lease\n"
	printf "exiting\n"
	exit

    fi

    echo
}


enable_dns()
{
    # systemd dns resolving service
    sudo systemctl start systemd-resolved.service
}


wl_info()
{
    if [[ $wireless == 1 ]]; then

	echo
	iwconfig $interface

    fi
}


ext_ip_info()
{
    #ipex=$(protonvpn s | grep IP: | awk '{print $2}')
    #ipex=$(curl -4 https://ifconfig.io)
    #ipex=$(dig myip.opendns.com @resolver1.opendns.com +dnssec +short)

    printf "obtaining external ip address...\n"

    ## connecting wirelessly can take some time
    if [[ $wireless == 1 ]]; then

	sleep 3

    fi

    try=0
    while [[ -z $ipex ]]; do

	sleep 1
	let try++
	ipex=$(host "$hostname" "$server1" 2>&1 | \
		   tail -n 1 | rev | cut -d ' ' -f 1 | rev)
	#ipex=$(dig myip.opendns.com @resolver1.opendns.com +dnssec +short)
	#ipex=$(protonvpn s | grep IP: | awk '{print $2}')

	sleep 1
	if [[ -z $ipex ]]; then
	    ipex=$(host "$hostname" "$server2" 2>&1 | \
		       tail -n 1 | rev | cut -d ' ' -f 1 | rev)
	fi

	#[DEV]
	[[ $try -gt 1 ]] && printf "try: $try\n"
	printf "current external ip address: ${fg_blue}$ipex${st_def}\n"

	[ $try -ge 10 ] && return

    done

    #protonvpn s
}


show_ipa_diff()
{
    t1=`date +%Y%m%d_%H%M%S`
    ip a > $temp_dir/"$t1"_netconn.tmp

    diff $temp_dir/"$t0"_netconn.tmp $temp_dir/"$t1"_netconn.tmp

    # diffs exits with code 1
    printf '' >/dev/null 2>&1
}


unblock_radio()
{
    if [[ ${interface:0:2} == 'wl' ]]; then

	sudo rfkill unblock wlan
	rfkill
	echo

    fi
}


connect_protonvpn()
{
    echo
    printf "connecting vpn, press n to abort "
    reply_read_single_hidden_timer
    echo

    if printf "$reply" | grep -iq "^n" ; then

	return

    else

	sleep 3
	sudo protonvpn c --cc SE -p udp
	sleep 3
	protonvpn s

    fi
}


connect()
{
    create_temp_dir
    [[ -n $show ]] && splash_screen
    get_sudo
    netistat_0
    run_netkill
    select_interface
    set_interface_up

    #TODO static_connect
    dhcp_connect
    #enable_dns
    ext_ip_info
    show_ipa_diff
    #connect_protonvpn
    sleep 2
    netistat_1
    netistat_d
    cleanup_temp
}


case $quiet in

    1)
	get_sudo
	#become_quiet
	#{
	#    connect
	#} 1>/dev/null 2>&1
	connect > /dev/null 2>&1
	#exec >/dev/null
	#exec 2>&1
	#connect
	#unquiet
	exit
	;;

    *)
	connect
	;;

esac
