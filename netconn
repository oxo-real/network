#!/bin/bash
#
##
###             _
###  _ __   ___| |_ ___ ___  _ __  _ __
### | '_ \ / _ \ __/ __/ _ \| '_ \| '_ \
### | | | |  __/ || (_| (_) | | | | | | |
### |_| |_|\___|\__\___\___/|_| |_|_| |_|
###
###  _ _|_ _ ._    _  _
### (_\/|_(_)|_)\/(_|(/_
###   /      |  /  _|
###
### netconn
### connect to a network
###
### usage: netconn [-w <config.wifi>]
###
### (c) 2019 - 2020 cytopyge
###
##
#


# define colors
RED='\033[0;31m' # red
GREEN='\033[0;32m' # green
NOC='\033[0m' # no color


# functions


# read_flags

while getopts ":k:w:h" opt; do
	case $opt in
		k)
			## -k netkill
			networks=${OPTARG}
                	sh $HOME/_git/code/netconn/netkill
			exit 0
			;;
		w)
			## -w wireless network flag
			wl_conf=${OPTARG}
			#wl_conf="$HOME/_keys/wl/$w.wifi"
			;;
		h)
			## -h display help text
			printf "netconn: usage: netconn [-w <config.wifi>]\n"
			exit 0
			;;
		\?)
			printf "netconn: ${RED}invalid option: -${OPTARG}${NOC}"
			exit 1
			;;
		:)
			## display help
			printf "netconn: ${RED}option -${OPTARG} requires an argument${NOC}"
			exit 1
			;;
	esac
done


# define reply functions

reply_plain() {

        # entry must be confirmed explicitly (by pushing enter)
        read reply

}


reply_single() {

        # first entered character goes directly to $reply
        stty_0=$(stty -g)
        stty raw #-echo
        reply=$(head -c 1)
        stty $stty_0

}


reply_single_hidden() {

        # first entered character goes silently to $reply
        stty_0=$(stty -g)
        stty raw -echo
        reply=$(head -c 1)
        stty $stty_0

}


reply_timed() {

	read -s -n 1 -t 5 reply

}


get_sudo() {

	sudo -k
	sudo echo
	t0=`date +%Y%m%d_%H%M%S`
	ip a > $HOME/_temp/'$t0'_netconn.tmp
	clear
	echo

}


run_netkill() {

    export from_netconn=1
    
    printf "disconnect current network connection? (y/N) "
    #reply_single_hidden
    reply_timed
    if printf "$reply" | grep -iq "^y" ; then
        clear
	printf "running netkill...\n"
        sh $HOME/_git/code/netconn/netkill
	echo
    else
	echo
	printf "setting up connection...\n"
	echo
    fi

    unset from_netconn
    sleep 2
    clear

}


select_interface() {

    # show default interface
    if [ -n "$wl_conf"  ]; then
	## no wl_conf flag entry
	## try to autoconnect via ethernet interface
	show_default_interface=$(ip a | grep '^[0-9]' | awk -F ': <' '{print $1}' | grep '^[0-9]\+:\sw')
    else
	## we do have a wl_conf flag
	## try to autoconnect via wireless interface
	show_default_interface=$(ip a | grep '^[0-9]' | awk -F ': <' '{print $1}' | grep '^[0-9]\+:\se')
    fi
    
    # select interface
    ip a
    echo
    printf "enter preferred interface number [$show_default_interface]: "
    #reply_single
    
    reply_timed
    
    ##"if no entry then when wl_conf<>0 then search wireless devices in ip a and select one that is up"
    ## -n -> var lenght greater than 0
    ## -z -> var lenght equals 0
    if [ -n "$reply" ]; then
	## we have an entry for interface
	interface_number=$reply
    else
	## no entry for interface
	if [ -n "$wl_conf"  ]; then
	    ## no wl_conf flag entry
	    ## try to autoconnect via ethernet interface
	    auto_retrieved_interface=$(ip a | grep '^[0-9]' | awk -F ': ' '{print $2}' | grep ^w)
	else
	    ## we do have a wl_conf flag
	    ## try to autoconnect via wireless interface
	    auto_retrieved_interface=$(ip a | grep '^[0-9]' | awk -F ': ' '{print $2}' | grep ^e)
	fi
    fi   
    
    echo

    ## derive interface from interface_number
    interface=$(ip a | grep "^$interface_number" | awk '{print $2}' | sed 's/://')
    if [ -n "$auto_retrieved_interface" ]; then
	interface=$auto_retrieved_interface
    fi
    
    ## if interface is wireless, check for entered wireless network flag
    if [ ${interface:0:1} == 'w' ] && [ -z $wl_conf ]; then
	echo
	printf "${RED}no wireless configuration allocated for '$interface'${NOC}\n"
	printf "${RED}point to a valid configuration with the 'w' flag'${NOC}\n"
	printf "exiting...\n"
	exit
    fi

    ## confirmation
    echo
    ip a | grep $interface
    echo
    printf "connect via interface '$interface'? (Y/n) "
    reply_timed
    
    if printf "$reply" | grep -iq "^n" ; then
        clear
        select_interface
    else
        echo
        echo
        printf "interface '$interface' selected\n"
	sleep 0.5
	echo
    fi

}


set_interface_up() {

	sleep 0.5
	clear

	printf "bringing interface '$interface' up ... "

	sudo ip link set $interface up

	if [ $? -eq 0  ]; then
		printf "${GREEN}success${NOC}\n"
		echo
	else
		echo
		printf "${RED}error, unable to bring $interface up${NOC}\n"
		printf "exiting\n"
	fi

}


check_wireless_interface() {

	wireless=0
	if [[ $interface == w* ]]; then
		wireless=1
	fi

}


wireless_network_select() {

	if [ $wireless == 1 ]; then
		# select wireless network from list
		wpa_supp
	fi

}


wpa_supp() {

	sudo wpa_supplicant -B -i $interface -c $wl_conf
	echo

}


dhcp_connect() {

	sudo dhcpcd -w $interface

	echo
	printf "getting host information from dhcp server\n"
	printf "configuring network interface $interface\n"
	printf "writing DNS configuration to resolvconf\n"
	resolvconf -i
	echo
	printf "checking if interface $interface reports a working carrier\n"
	printf "trying to obtain a lease, then forking to background\n"
	if [ $? -eq 0 ]; then
		printf "interface ${GREEN}'$interface' connected${NOC}\n"
		printf "dhcpcd daemonizing...\n"
	else
		printf "${RED}$interface not able to obtain lease${NOC}\n"
		printf "exiting\n"
		exit
	fi
	echo
	ping -c 1 9.9.9.9
	echo
	ip a

}


wl_info() {

	if [ $wireless == 1 ]; then
		echo
		iwconfig $interface
	fi

	printf "external ip: ${GREEN}$(curl -4 https://ident.me)${NOC}\n"

}


show_ipa_diff() {

	t1=`date +%Y%m%d_%H%M%S`
	ip a > $HOME/_temp/'$t1'_netconn.tmp

	diff $HOME/_temp/'$t0'_netconn.tmp $HOME/_temp/'$t1'_netconn.tmp

}


#read_flags #doesn't work in function block
get_sudo
run_netkill
select_interface
set_interface_up
check_wireless_interface
wireless_network_select
dhcp_connect
wl_info
show_ipa_diff
