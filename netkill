#!/bin/sh
#
##
###             _   _    _ _ _
###  _ __   ___| |_| | _(_) | |
### | '_ \ / _ \ __| |/ / | | |
### | | | |  __/ |_|   <| | | |
### |_| |_|\___|\__|_|\_\_|_|_|
###
###  _ _|_ _ ._    _  _
### (_\/|_(_)|_)\/(_|(/_
###   /      |  /  _|
###
### netkill
### thoroughly kill a network connection
### (c) 2019 - 2021 cytopyge
###
##
#


# script specific constants

script_name="netkill"
developer="cytopyge"
initial_release_year=2019
source_dir="$HOME/_git/code/sources/functions"
temp_dir="$XDG_CACHE_HOME/temp"


# general function definitions

## define colors
source $source_dir/text_appearance

## reply functions
source $source_dir/reply_functions

## initial_screen
source $source_dir/splash_screen

## user authentication
source $source_dir/get_sudo


# force permission if not from_netconn
if [ -z $from_netconn ]; then

    #splash_screen
    get_sudo

fi


[[ -d $temp_dir ]] || mkdir -pv $temp_dir
t0=`date +%Y%m%d_%H%M%S`
ip a > $temp_dir/"$t0"_netkill.tmp


stop_dns_service() {

	sudo systemctl stop systemd-resolved.service

}


kill_tunnel() {

	## openvpn
	sudo openvpn --rmtun $i
	printf "persistent tunnel removed\n"

	sudo pkill openvpn
	printf "openvpn process terminated\n"

	sleep 1

	i=$(ip -o -4 route show to default | head -n 1 | awk '{print $5}')

	echo

}


kill_wpa_supp() {
	sudo systemctl stop wpa_supplicant.service
	sudo pkill wpa_supplicant
	printf "wpa_supplicant process terminated\n"
	systemctl status wpa_supplicant.service
	echo

}


kill_dhcpcd() {

	sudo dhcpcd -k $i
	printf "dhcp release message sent to '$i'\n"
	printf "dhcp client daemon cache cleared\n"
	echo

	sudo dhcpcd -x $i
	printf "dhcp exit process for '$i'\n"

	sudo systemctl stop dhcpcd.service
	sudo pkill dhcpcd
	printf "dhcpcd process terminated\n"
	systemctl status dhcpcd.service
	echo

}


kill_ip () {

	sudo ip link set $i down
	printf "device '$i' state set down\n"
	sleep 3
	echo

	sudo ip a flush $i
	printf "ip a flushed\n"
	sleep 3
	echo

}


block_radios() {

	sudo rfkill block wlan

}

protonvpn_disconnect() {

	## protonvpn
	#if [[ -z $(protonvpn s | head -n 1 | grep Disconnected) ]]; then

		printf "disconnecting protonvpn...\n"
		sudo protonvpn d
		protonvpn s

	#fi

}


# retrieve interface variable
#i=$(ip -o -4 route show to default | head -n 1 | awk '{print $5}')
source_ip="9.9.9.9"
i=$(ip route get $source_ip | awk '{print $5}')

stop_dns_service

# interface connection not active
if [ -z "$i" ]; then
	printf "${RED}no active interface detected${NOC}\n"
	printf "${YELLOW}interface is possibly already down${NOC}\n"
	echo

	kill_wpa_supp
	kill_dhcpcd
	kill_ip

fi


# interface connection type: ethernet
if [ "$(printf "$i" | cut -c 1)" = "e" ]; then
	printf "interface connected: $i (ethernet)\n"
	echo

	kill_dhcpcd
	kill_ip

fi


# interface connection type: wireless
if [ "$(printf "$i" | cut -c 1)" = "w" ]; then
	printf "interface connected: $i (wireless)\n"
	echo

	kill_wpa_supp
	kill_dhcpcd
	kill_ip

fi


# interface connection type: tunnel
if [ "$(printf "$i" | cut -c 1)" = "t" ]; then
	printf "interface connected: $i (tunnel)\n"
	echo

	kill_tunnel
	kill_wpa_supp
	kill_dhcpcd
	kill_ip

fi


# disconnect protonvpn
protonvpn_disconnect


# rfkill radios
block_radios


# info for human
printf "verifying disconnect\n"
t1=`date +%Y%m%d_%H%M%S`
ip a > $temp_dir/"$t1"_netkill.tmp

diff $temp_dir/"$t0"_netkill.tmp $temp_dir/"$t1"_netkill.tmp

#[DEV] to give interface time to shutdown
#[DEV] adn disconnect from ip address
sleep 3

printf "* "
ping -c 1 $source_ip
printf "however icmp can be locally blocked\n"
#printf "* "
ipex=$(dig @resolver1.opendns.com myip.opendns.com +dnssec +short)
[[ -z $ipex ]] \
	&& printf "* via opendns.com no external ip address detected\n" \
	|| printf "${RED}* external ip address still reads: $ipex${NOC}\n"

ip a
echo
rfkill
echo
printf "netkill complete\n"
exit


#[TODO]
# if more than one device active
if [ -n $(ip a | grep -iv loopback | grep unknown) ]; then
	printf "a device state is unknown\n"
	printf "try running netkill\n"
fi
