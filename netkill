#! /usr/bin/env sh

###             _   _    _ _ _
###  _ __   ___| |_| | _(_) | |
### | '_ \ / _ \ __| |/ / | | |
### | | | |  __/ |_|   <| | | |
### |_| |_|\___|\__|_|\_\_|_|_|
###
###
###  # # # # # #
###       #
###  # # # # # #
###

: '
netkill
thoroughly kill a network connection
copyright (c) 2019 - 2024  |  oxo

GNU GPLv3 GENERAL PUBLIC LICENSE
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
https://www.gnu.org/licenses/gpl-3.0.txt

@oxo@qoto.org


# dependencies
  source functions


# usage
  netkill

# '


#set -o errexit
#set -o nounset
set -o pipefail


# script specific constants

script_name='netkill'
developer='oxo'
initial_release_year='2019'
source_dir="$XDG_DATA_HOME/c/git/code/source/function"
temp_dir="$XDG_CACHE_HOME/temp"

source_ip='9.9.9.9'
netistat="$XDG_DATA_HOME/c/git/code/tool/netistat"

# general function definitions

## define colors
source $source_dir/text_appearance

## reply functions
source $source_dir/reply_functions

## initial_screen
source $source_dir/splash_screen

## user authentication
source $source_dir/get_sudo


permission()
{
    # force permission if not from_netconn
    if [ -z $from_netconn ]; then

	#splash_screen
	get_sudo

    fi
}


temp_dir()
{
    [[ -d $temp_dir ]] || mkdir -pv $temp_dir
    t0=$(date +%Y%m%d_%H%M%S)
    #t0=`date +%Y%m%d_%H%M%S`
    ip a > $temp_dir/"$t0"_netkill.tmp
}


netistat_0()
{
    net_0=$(sh $netistat)
}

netistat_1()
{
    net_1=$(sh $netistat)
}

netistat_d()
{
    diff <(echo "$net_0") <(echo "$net_1")
}


stop_dns_service()
{
    sudo systemctl stop systemd-resolved.service
}


kill_tunnel()
{
    ## openvpn
    openvpn --rmtun $i
    printf "persistent tunnel removed\n"

    pkill openvpn
    printf "openvpn process terminated\n"

    sleep 1

    i=$(ip -o -4 route show to default | head -n 1 | awk '{print $5}')

    echo
}


kill_protonvpn()
{
    protonvpn d
    sleep 2
    protonvpn s

    i=$(ip -o -4 route show to default | head -n 1 | awk '{print $5}')
}


kill_wpa_supp()
{
    sudo systemctl stop wpa_supplicant.service
    sudo pkill wpa_supplicant
    systemctl status wpa_supplicant.service
    echo
}


kill_dhcpcd()
{
    #	sudo dhcpcd -k $i
    #	printf "dhcp release message sent to '$i'\n"
    #	printf "dhcp client daemon cache cleared\n"
    #	echo

    #	sudo dhcpcd -x $i
    #	printf "dhcp exit process for '$i'\n"

    #	sudo pkill dhcpcd
    #	printf "dhcpcd process terminated\n"

    #	sudo systemctl restart dhcpcd.service

    #sleep 2
    sudo systemctl stop dhcpcd.service
    sleep 2
    systemctl status dhcpcd.service
    echo
}


kill_ip()
{
    sudo ip link set $i down

    if [[ $? -eq 0 ]]; then

	#sleep 2
	printf "device %s state set ${fg_blue}down${st_def}\n" "$i"

    fi

    echo

    sudo ip a flush $i

    if [[ $? -eq 0 ]]; then

	#sleep 1.5
	printf "ip a ${fg_blue}flushed${st_def}\n"

    fi

    echo
}


block_radios()
{
    sudo rfkill block wlan
}


protonvpn_disconnect()
{
    ## protonvpn
    #if [[ -z $(protonvpn s | head -n 1 | grep Disconnected) ]]; then

    printf "disconnecting protonvpn...\n"
    protonvpn d

    #fi

    protonvpn s
}


data_rxtx()
{
    if [[ -n $i ]]; then

	#TODO add uptime
	#get session traffic data (bytes)
	data_rx_i=$(grep $i /proc/net/dev | awk '{print $2}')
	data_tx_i=$(grep $i /proc/net/dev | awk '{print $10}')

    else

	[[ -z $data_rx_i ]] && data_rx_i='n/a'
	[[ -z $data_tx_i ]] && data_tx_i='n/a'

    fi

    #show data
    echo
    printf "interface ${fg_blue}%s${st_def} session traffic statistics (bytes)\n" "$i"
    printf 'rx: %s\n' "$data_rx_i"
    printf 'tx: %s\n' "$data_tx_i"
    echo

}

get_interface()
{
    # retrieve interface variable
    #[TODO]
    # if more than one interface active (state UNKNOWN, no lo interface)
    if [ -n "$(ip a | grep -iv loopback | grep -i unknown)" ]; then
	printf "an interface state is unknown\n"
	printf "re-run netkill after this instance\n"
	sleep 1
    fi

    #i=$(ip -o -4 route show to default | head -n 1 | awk '{print $5}')
    i=$(ip route get $source_ip | awk '{print $5}')

    if [[ -z $i ]]; then

	printf "no active ${fg_amber}interface${st_def} detected\n"

    fi
}



kill()
{
    # interface connection not active
    if [ -z "$i" ]; then

	kill_wpa_supp
	kill_dhcpcd
	kill_ip

    fi


    # interface connection type: ethernet
    if [ "$(printf "$i" | cut -c 1)" = "e" ]; then
	printf "interface connected: $i (ethernet)\n"
	echo

	kill_dhcpcd
	kill_ip

    fi


    # interface connection type: wireless
    if [ "$(printf "$i" | cut -c 1)" = "w" ]; then
	printf "interface connected: $i (wireless)\n"
	echo

	kill_wpa_supp
	kill_dhcpcd
	kill_ip

    fi


    # interface connection type: protonvpn
    if [ "$(printf "$i" | cut -c 1)" = "p" ]; then
	printf "interface connected: $i (protonvpn)\n"
	echo

	kill_protonvpn

	if [ "$(printf "$i" | cut -c 1)" = "w" ]; then
	    kill_wpa_supp
	fi

	kill_dhcpcd
	kill_ip

    fi


    # interface connection type: tunnel
    if [ "$(printf "$i" | cut -c 1)" = "t" ]; then
	printf "interface connected: $i (tunnel)\n"
	echo

	kill_tunnel

	if [ "$(printf "$i" | cut -c 1)" = "w" ]; then
	    kill_wpa_supp
	fi

	kill_dhcpcd
	kill_ip

    fi
}


disconnect_protonvpn()
{
    protonvpn_disconnect
}

#disconnect_protonvpn


rfkill_radios()
{
    block_radios
}



human_info()
{
    # info for human
    printf "${st_bold}verifying disconnect${st_def}\n"
    echo

    printf "${st_bold}1: ${st_def}"
    t1=`date +%Y%m%d_%H%M%S`
    ip a > $temp_dir/"$t1"_netkill.tmp

    diff $temp_dir/"$t0"_netkill.tmp $temp_dir/"$t1"_netkill.tmp

    #[DEV] to give interface time to shutdown
    #[DEV] adn disconnect from ip address
    sleep 3
    echo

    printf "${st_bold}2: ${st_def}"
    #printf "* "
    ping -c 1 $source_ip
    printf "WARNING: ${st_bold}icmp${st_def} can however be locally blocked\n"
    echo

    #printf "* "
    printf "${st_bold}3: ${st_def}"
    ipex=$(host myip.opendns.com resolver2.opendns.com \
	       | tail -n 1 | rev | cut -d ' ' -f 1 | rev)
    #ipex=$(dig @resolver1.opendns.com myip.opendns.com +dnssec +short)
    [[ -z $ipex ]] \
	&& printf 'no external ip address detected\n' \
	    || printf "external ip address still reads: ${fg_amber}%s${st_def}\n" "$ipex"

    echo
    printf "${st_bold}4: ${st_def}"
    ip a
    echo

    rfkill
    echo
    printf "netkill complete\n"
}



cleanup()
{
    rm $temp_dir/"$t0"_netkill.tmp
    rm $temp_dir/"$t1"_netkill.tmp
}


main()
{
    permission
    temp_dir
    netistat_0
    get_interface
    data_rxtx
    stop_dns_service
    kill
    rfkill_radios
    human_info
    cleanup
    netistat_1
    netistat_d
    exit 0
}

main
