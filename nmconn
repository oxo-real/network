#! /usr/bin/env sh

###             _
###  _ __   ___| |_ ___ ___  _ __  _ __
### | '_ \ / _ \ __/ __/ _ \| '_ \| '_ \
### | | | |  __/ || (_| (_) | | | | | | |
### |_| |_|\___|\__\___\___/|_| |_|_| |_|
###
###  # # # # # #
###       #
###  # # # # # #
###

: '
nmconn
(dis)connect to a network using nmcli
copyright (c) 2023 - 2024  |  oxo

GNU GPLv3 GENERAL PUBLIC LICENSE
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
https://www.gnu.org/licenses/gpl-3.0.txt

@oxo@qoto.org


## dependencies
#	$source_dir

## usage
#	netconn

## example
#	none

# '


#set -o errexit
#set -o nounset
set -o pipefail


# initial definitions

## script
script_dir="$XDG_DATA_HOME/c/git/code/network"
script_name='nmconn'
developer='oxo'
license='gplv3'
initial_release='2023'

## hardcoded variables
source $XDG_DATA_HOME/c/git/code/source/function/text_appearance
wg_interface_dir="$XDG_CONFIG_HOME/network/vpn/wg/proton/interface"

## source functions
source_dir="$XDG_DATA_HOME/c/git/code/source/function"
source $source_dir/text_appearance
source $source_dir/reply_functions
source $source_dir/get_sudo


#--------------------------------


# specific function definitions


check_sum ()
{
    ## check file integrity
    check-sum $(realpath $script_dir/$script_name)
    [[ $? -ne 0 ]] && exit 88
}


start_nm ()
{
    get_sudo
    sudo systemctl start NetworkManager.service
    sudo systemctl start systemd-resolved.service
}


get_nm_info ()
{
    nmcli radio
    echo
    nmcli general status
    echo
    nmcli device status
    echo
}


select_connection ()
{
    ## known connections
    ## human readable (no -terse) version here for fzf
    conn_list=$(nmcli connection show)
    conn_sel=$(printf '%s\n%s\n' "$conn_list" 'other_wl_ap' | fzf --header-lines 1 --prompt 'select connection ')

    case $conn_sel in

	'' )
	    wg_interface=$(nmcli device status | grep wireguard | grep --word-regexp connected | awk '{print $NF}')
	    ;;

	other_wl_ap )
	    ## add a new wireless connection

	    rfkill unblock wifi
	    nmcli radio wifi on
	    printf '%s' 'getting wireless access point data, please wait'
	    sleep 1

	    for i in {1..3}; do

		printf '%s' '.'
		sleep 0.5

	    done

	    ## filter out connection in-use
	    ## NOTICE $conn_sel source changes to device wifi list
	    conn_sel=$(nmcli device wifi list | grep --invert-match '^*' | fzf --header-lines 1)

	    ## mitigate possible spaces in connection name
	    conn_sel_bssid=$(printf '%s' "$conn_sel" | awk '{print $1}')
	    conn_sel_ssid=$(printf '%s' "$conn_sel" | grep "$conn_sel_bssid" | awk '{print $2}')

	    ## other connection data
	    conn_sel_type='wifi'
	    conn_sel_chan=$(printf '%s' "$conn_sel" | awk '{print $4}')
	    conn_sel_signal=$(printf '%s' "$conn_sel" | awk '{print $7}')
	    conn_sel_security=$(printf '%s' "$conn_sel" | awk '{print $NF}')

	    printf '\rSSID: %s\n' "$conn_sel_ssid"

	    add_connection
	    ;;

	* )
	    ## known connection selected

	    ## mitigate possible spaces in connection name
	    conn_sel_uuid=$(printf '%s' "$conn_sel" | awk '{print $2}')
	    conn_sel=$(nmcli -terse connection show | grep $conn_sel_uuid)

	    ## other connection data
	    conn_sel_type=$(printf '%s' "$conn_sel" | awk -F : '{print $3}')
	    conn_sel_device=$(printf '%s' "$conn_sel" | awk -F : '{print $4}')

	    ## different variable name
	    ## ($con_sel_ssid & $con_sel_name)
	    case $conn_sel_type in

		wifi | *wireless*)
		    ## set type to wifi (in case of 802-11-wireless)
		    conn_sel_type='wifi'
		    ## mitigate possible spaces in connection name
		    conn_sel_ssid=$(nmcli -terse connection show | grep $conn_sel_uuid | awk -F : '{print $1}')
		    ;;

		*)
		    ## mitigate possible spaces in connection name
		    conn_sel_name=$(nmcli -terse connection show | grep $conn_sel_uuid | awk -F : '{print $1}')
		    ;;

	    esac
	    ;;

    esac
}


add_connection ()
{
    case $conn_sel_type in

	wifi)
	    case $conn_sel_security in

		*WPA* )
		    ## enter wifi password
		    nmcli device wifi connect $conn_sel_ssid --ask
		    ;;

		* )
		    nmcli device wifi connect $conn_sel_ssid
		    ;;

	    esac
	    ;;

    esac
}


determine_action ()
{
    if [[ -z "$conn_sel" ]]; then

	## no connection selected
	nmcli connection show

	case $wg_interface in

	    '' )
		vpn_connect
		;;

	    * )
		echo
		wg_interface=$(printf '%s' "$wg_interface" | fzf --exit-0 --prompt 'disconnect vpn ')
		vpn_disconnect
		;;

	esac

    else

	case $conn_sel_device in

	    -- | '' )
		## connect
		connect
		;;

	    * )
		## disconnect
		disconnect
		;;

	esac

    fi
}


connect ()
{
    case $conn_sel_type in

	wifi )
	    ## connect wifi
	    rfkill unblock wifi
	    nmcli radio wifi on
	    sleep 1
	    nmcli connection up "$conn_sel_ssid"
	    echo
	    nmcli device status
	    ;;

	'' )
	    ## no connection selected
	    :
	    ;;

	* )
	    ## connect non-wifi
	    nmcli connection up "$conn_sel_name"
	    ;;

    esac

    echo
    vpn_connect
    echo
}


vpn_connect ()
{
    ## vpn connect
    echo
    wg_interface_conf=$(fd --format {/.} . $wg_interface_dir)
    # wg_interface_conf=$(ls $wg_interface_dir)
    wg_interface=$(printf '%s' "$wg_interface_conf" | awk -F '.' '{print $1}')
    wg_interface_select=$(printf '%s' "$wg_interface" | fzf --exit-0 --prompt 'connect vpn ')

    ## no interface selected
    [[ -z $wg_interface_select ]] && printf "${fg_white}no vpn${st_def} selected\n"
    # [[ -z $wg_interface_select ]] && printf "${fg_white}no vpn${st_def} selected\n" && exit 0
    [[ -n $wg_interface_select ]] && wg-quick up $wg_interface_select && printf "[#] ${fg_green}$wg_interface_select${st_def} up\n"
    echo
    return
}


vpn_disconnect ()
{
    [[ -n $wg_interface ]] && wg-quick down $wg_interface && printf "[#] ${fg_amber}$wg_interface${st_def} down\n"
    echo

    printf '%s' 'vpn reconnect? [y/N] '
    reply_read_single

    case $reply in

	y|Y )
	    vpn_connect
	    ;;

	* )
	    tput cuu1
	    printf '\r'
	    tput el
	    ;;

    esac
}


disconnect ()
{
    case $conn_sel_type in

	wifi )
	    ## disconnect wifi
	    echo
	    wg_interface=$(nmcli device status | grep wireguard | grep --word-regexp connected | awk '{print $NF}')
	    vpn_disconnect
	    nmcli connection down "$conn_sel_ssid"
	    nmcli radio wifi off
	    rfkill block wifi
	    echo
	    nmcli device status
	    ;;

	wireguard )
	    wg_interface=$(nmcli device status | grep wireguard | grep --word-regexp connected | awk '{print $NF}')
	    echo
	    vpn_disconnect
	    ;;

	* )
	    ## disconnect non-wifi
	    echo
	    wg_interface=$(nmcli device status | grep wireguard | grep --word-regexp connected | awk '{print $NF}')
	    vpn_disconnect
	    nmcli connection down "$conn_sel_name"
	    echo
	    nmcli device status
	    ;;

    esac
}


main ()
{
    check_sum
    start_nm

    ## status before nmconn
    get_nm_info

    select_connection
    determine_action

    ## status after nmconn
    get_nm_info
}

main
